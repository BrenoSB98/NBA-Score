services:
  postgres_db:
    image: postgres:15
    container_name: nba_postgres_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - nba_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: nba_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}

    ports:
      - "5050:80"
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - nba_network

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow    
    container_name: nba_airflow_init
    env_file:
      - .env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    networks:
      - nba_network
    depends_on:
      postgres_db:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: |
      set -e
      echo ">> Migrando metadados do Airflow..."
      airflow db migrate
      echo ">> Criando usuário admin..."
      airflow users create \
        --username "admin" \
        --password "1002" \
        --firstname "Breno" \
        --lastname "DEV" \
        --role "Admin" \
        --email "admin@example.com"
      echo ">> airflow-init concluído."
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: nba_airflow_webserver
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    networks:
      - nba_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres_db:
        condition: service_healthy
    command: webserver
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: nba_airflow_scheduler
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    networks:
      - nba_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres_db:
        condition: service_healthy
    command: scheduler

volumes:
  postgres_data:
    driver: local
  logs:
    driver: local

networks:
  nba_network:
    driver: bridge